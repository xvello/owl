// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	exec "os/exec"

	mock "github.com/stretchr/testify/mock"
)

// Owl is an autogenerated mock type for the Owl type
type Owl struct {
	mock.Mock
}

// Errorf provides a mock function with given fields: format, args
func (_m *Owl) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ExecCommand provides a mock function with given fields: name, arg
func (_m *Owl) ExecCommand(name string, arg ...string) *exec.Cmd {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *exec.Cmd
	if rf, ok := ret.Get(0).(func(string, ...string) *exec.Cmd); ok {
		r0 = rf(name, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	return r0
}

// FailNow provides a mock function with given fields:
func (_m *Owl) FailNow() {
	_m.Called()
}

// IsVerbose provides a mock function with given fields:
func (_m *Owl) IsVerbose() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Printf provides a mock function with given fields: format, a
func (_m *Owl) Printf(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Println provides a mock function with given fields: a
func (_m *Owl) Println(a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}
